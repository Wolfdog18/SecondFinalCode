// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "MainSubsystem.h"
#include "../RobotMap.h"
#include "../Commands/LiftArm.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

MainSubsystem::MainSubsystem() : Subsystem("MainSubsystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //liftSolenoidDouble = RobotMap::mainSubsystemLiftSolenoidDouble;
	shooterSol1 = RobotMap::solenoid0;
	shooterSol2 = RobotMap::solenoid1;
	armSol1 = RobotMap::solenoid4;
	armSol2 = RobotMap::solenoid5;

	solStates[0] = 0;
	solStates[1] = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void MainSubsystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    SetDefaultCommand(new LiftArm());
    //SetDefaultCommand(new LowerArm());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void MainSubsystem::moveShooter(std::shared_ptr<Joystick> rightJoystick){
	if (rightJoystick.get()->GetY() > 0.1){
		//armSol.get()->Set(DoubleSolenoid::kForward);
		shooterSol1.get()->Set(false);
		shooterSol2.get()->Set(true);
	}else if (rightJoystick.get()->GetY() < -0.1){
		//armSol.get()->Set(DoubleSolenoid::kReverse);
		shooterSol1.get()->Set(true);
		shooterSol2.get()->Set(false);
	}else{
		stopShooter();
	}
}

void MainSubsystem::stopShooter(){
	//armSol.get()->Set(DoubleSolenoid::kOff);
	shooterSol1.get()->Set(false);
	shooterSol2.get()->Set(false);
}

void MainSubsystem::moveArm(std::shared_ptr<Joystick> leftJoystick){
	if (leftJoystick.get()->GetY() > 0.1){
		//armSol.get()->Set(DoubleSolenoid::kForward);
		armSol1.get()->Set(false);
		armSol2.get()->Set(true);
	}else if (leftJoystick.get()->GetY() < -0.1){
		//armSol.get()->Set(DoubleSolenoid::kReverse);
		armSol1.get()->Set(true);
		armSol2.get()->Set(false);
	}else{
		stopArm();
	}
}

void MainSubsystem::stopArm(){
	//armSol.get()->Set(DoubleSolenoid::kOff);
	armSol1.get()->Set(false);
	armSol2.get()->Set(false);
}
